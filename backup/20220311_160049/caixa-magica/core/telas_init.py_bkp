import json
import time 
import sys
import os
from tkinter import *
import tkinter.messagebox
from tkinter import ttk
from tkinter import messagebox
from threading import Thread 
sys.path.insert(1, '/home/pi/caixa-magica/')
from sincronismo import req as sincronismo
sys.path.insert(2, '/home/pi/caixa-magica/tela/')
from tela_aguarde import TelaAguarde
import bio
import requests
import base64
import pyspeedtest
import datetime
from datetime import timezone
# import urllib.request as urllib2
import logging
import signal
from contextlib import contextmanager
import multiprocessing
import encrypt
import db
import socket

import subprocess as sp

# logging.basicConfig(filename='logs/tnit.log', filemode='a', format='%(asctime)-s - %(levelname)s - %(message)s', level=logging.DEBUG)
logFormatter = logging.Formatter("%(asctime)s  %(message)s")
logger = logging.getLogger()
logPath = "logs"
fileName = "fluxo_inicializacao_fechamento"
fileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))
fileHandler.setFormatter(logFormatter)
logger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)

HOST = 'localhost'  # The server's hostname or IP address
PORT = 30090        # The port used by the server

### Abrindo jsons
# instalacao.json
try:
    with open("/home/pi/caixa-magica/sincronismo/instalacao.json", "r") as json_data:
        dados_instalacao = json.load(json_data)
    
        onibus_id = dados_instalacao["veiculo"]
except Exception as e:
    print("Erro ao abrir 'instalacao.json' em 'telas_init.pye': ", e)

# Adicionado por Fernando Andre de Almeida em 2021-07-27
def getSerial():
    cpuserial = ''
    try:
            with open('/proc/cpuinfo', 'r') as f:
                    for line in f:
                        if line[0:6] == 'Serial':
                                cpuserial = line[10:26]
                    f.close()
    except:
            cpuserial = ''
    return cpuserial

def getNotIntegrated():
    conn1 = db.Conexao()
    query = conn1.consultar("select count(*) from cobrancas where enviada=false")
    total = query[0][0]
    #total = 1
    return total

### Tela Comunicação
def core_init(nome_motorista, id_qrcode_motorista, id_web_motorista):
    logger.warning("Responsável Detectado: " + nome_motorista)    
    if operacao_on():
        logger.warning("inicio GET viagem Responsável")
        inicio_sync = datetime.datetime.now()
        r = sincronismo.get_viagem_responsavel(id_web_motorista)
        fim_sync = datetime.datetime.now()
        tempo_requisicao = fim_sync - inicio_sync 
        logger.warning("Tempo Requisição GET viagem Responsável" + str(tempo_requisicao))
        if r:
            inicializacao = r.json()
            with open("/home/pi/caixa-magica/core/inicializacao.json", "w") as json_data:
                json.dump(inicializacao, json_data)
            '''
            tipo 0 -> normal
            tipo 1 -> linha
            tipo 2 -> especial (caixa tem)
            tipo 3 -> offline
            '''
            tipo = 0
            status = 1
            s = sincronismo.iniciar_viagem(tipo, id_web_motorista, status)

            response = s.json()
            with open("/home/pi/caixa-magica/core/viagem.json", "w+") as json_data:
                json.dump(response, json_data)

            try:
                os.remove("/home/pi/caixa-magica/core/passagens_viagem.json")
            except:
                pass
            os.system("sh inicializar_sistema.sh")
        else:
            tela_confirmacao(nome_motorista)
    else:
        alert_no_network()
        tela_input_offline()
        return

### Telas Código
def tela_input_linha():
    root = Tk()
    style = ttk.Style(root)
    fonte = ("Arial 50 bold")
    fonte2 = ("Arial 26 bold")
    root.dados_onibus = StringVar()
    #root.numero_instalacao = StringVar()
    root.title('Insira Código Linha')
    root.frame_dados_onibus = Frame(root, borderwidth=10)
    root.frame_dados_onibus.pack(fill='x')
    
    root.lbl_onibus = Label(root.frame_dados_onibus, text="Código\nLinha: ", font=fonte2)
    root.lbl_onibus.pack(side='left')

    root.txt_veiculo = Entry(root.frame_dados_onibus, textvariable=root.dados_onibus)
    root.txt_veiculo["font"] = fonte
    root.txt_veiculo.delete(0, END)
    root.txt_veiculo.focus_set()
    root.txt_veiculo.pack(side='left', fill='x', expand=True)
   
    fonte_botoes = ('Arial', '90', 'bold')

    #frame 123
    root.frame_1 = Frame(root)
    root.frame_1.configure(bg='white')
    root.frame_1.pack(fill='both', expand=True)

    ###111
    root.butt_1 = Button(root.frame_1, command = lambda:key_1(root))
    root.butt_1['text'] = '1'
    root.butt_1['font'] = fonte_botoes
    # root.butt_1["command"] = key_1(root)
    root.butt_1.configure(bg='white', activebackground='white')
    root.butt_1.pack(side='left', fill='both', expand=True)
    
    ###222
    root.butt_2 = Button(root.frame_1, command = lambda:key_2(root))
    root.butt_2['text'] = '2'
    root.butt_2['font'] = fonte_botoes
    # root.butt_2["command"] = key_2(root)
    root.butt_2.configure(bg='white', activebackground='white')
    root.butt_2.pack(side='left', fill='both', expand=True)
    
    ###333
    root.butt_3 = Button(root.frame_1, command = lambda:key_3(root))
    root.butt_3['text'] = '3'
    root.butt_3['font'] = fonte_botoes
    # root.butt_3["command"] = key_3(root)
    root.butt_3.configure(bg='white',
                                    activebackground='white')
    root.butt_3.pack(side='left', fill='both', expand=True)

    # #frame 
    root.frame_4 = Frame(root)
    root.frame_4.configure(bg='white')
    root.frame_4.pack(fill='both', expand=True)

    ###444
    root.butt_4 = Button(root.frame_4, command = lambda:key_4(root))
    root.butt_4['text'] = '4'
    root.butt_4['font'] = fonte_botoes
    # root.butt_4["command"] = key_4(root)
    root.butt_4.configure(bg='white',
                                    activebackground='white')
    root.butt_4.pack(side='left', fill='both', expand=True)

    ###555
    root.butt_5 = Button(root.frame_4, command = lambda:key_5(root))
    root.butt_5['text'] = '5'
    root.butt_5['font'] = fonte_botoes
    # root.butt_5["command"] = key_5(root)
    root.butt_5.configure(bg='white',
                                    activebackground='white')
    root.butt_5.pack(side='left', fill='both', expand=True)

    ###666
    root.butt_6 = Button(root.frame_4, command = lambda:key_6(root))
    root.butt_6['text'] = '6'
    root.butt_6['font'] = fonte_botoes
    # root.butt_6["command"] = key_6(root)
    root.butt_6.configure(bg='white',
                                    activebackground='white')
    root.butt_6.pack(side='left', fill='both', expand=True)

    #frame 789
    root.frame_7 = Frame(root)
    root.frame_7.configure(bg='white')
    root.frame_7.pack(fill='both', expand=True)
    
    ###777
    root.butt_7 = Button(root.frame_7, command = lambda:key_7(root))
    root.butt_7['text'] = '7'
    root.butt_7['font'] = fonte_botoes
    # root.butt_7["command"] = key_7(root)
    root.butt_7.configure(bg='white',
                                    activebackground='white')
    root.butt_7.pack(side='left', fill='both', expand=True)

    ###888
    root.butt_8 = Button(root.frame_7, command = lambda:key_8(root))
    root.butt_8['text'] = '8'
    root.butt_8['font'] = fonte_botoes
    # root.butt_8["command"] = key_8(root)
    root.butt_8.configure(bg='white',
                                    activebackground='white')
    root.butt_8.pack(side='left', fill='both', expand=True)

    ###999
    root.butt_9 = Button(root.frame_7, command = lambda:key_9(root))
    root.butt_9['text'] = '9'
    root.butt_9['font'] = fonte_botoes
    # root.butt_9["command"] = key_9(root)
    root.butt_9.configure(bg='white',
                                    activebackground='white')
    root.butt_9.pack(side='left', fill='both', expand=True)
    
    #frame espaco
    root.frame_espaco = Frame(root)
    root.frame_espaco.configure(bg='white')
    root.frame_espaco.pack(fill='both', expand=True)
    

    ###_backspace
    root.butt_backspace = Button(root.frame_espaco, command = lambda:def_backspace(root))
    root.butt_backspace['text'] = '←'
    root.butt_backspace['font'] = ('Arial', '51', 'bold')
    root.butt_backspace['width'] = '2'
    # root.butt_backspace["command"] = def_backspace(root)
    root.butt_backspace.configure(bg='white',
                                    activebackground='white')
    root.butt_backspace.pack(side='left', fill='both', expand=True)
    # root.butt_backspace.grid(row=0, column=0)


    ###000
    root.butt_0 = Button(root.frame_espaco, command = lambda:key_0(root))   
    root.butt_0['text'] = '0'
    root.butt_0['font'] = ('Arial', '100', 'bold')
    root.butt_0["command"] = key_0(root)
    root.butt_0.configure(bg='white',
                                    activebackground='white')
    root.butt_0.pack(side='left', fill='both', expand=True)
    

    # ###cancelar
    # root.butt_cancelar = Button(root.frame_espaco)
    # root.butt_cancelar['text'] = '×'
    # root.butt_cancelar['font'] = fonte_botoes
    # root.butt_cancelar["command"] = root.def_cancelar
    # root.butt_cancelar.configure(bg='white',
    #                              activebackground='white')
    # root.butt_cancelar.pack(side='left', fill='both', expand=True)


    ###aceitar
    root.butt_confirmar = Button(root.frame_espaco,command = lambda: salvar_linha_id(root))
    root.butt_confirmar['text'] = '✓'
    root.butt_confirmar['font'] = ('Arial', '68', 'bold')
    # root.butt_confirmar["command"] = salvar_novos_valores(root)
    root.butt_confirmar.configure(bg='white',
                                    activebackground='white')
    root.butt_confirmar.pack(side='left', fill='both', expand=True)
    # root.butt_0.grid(row=0, column=2)

    root.butt_voltar = Button(root)
    root.butt_voltar["text"] = "Voltar"
    root.butt_voltar["bg"] = "white"
    root.butt_voltar["font"] = ("Verdana", "15", "bold")
    root.butt_voltar["height"] = "3"
    root.butt_voltar["command"] = lambda: [root.destroy(), root.quit()]
    root.butt_voltar.pack(fill=X)

    root.mainloop()

def tela_input_offline():

    root = Tk()
    style = ttk.Style(root)
    fonte = ("Arial 50 bold")
    fonte2 = ("Arial 26 bold")
    root.dados_onibus = StringVar()
    #root.numero_instalacao = StringVar()
    root.title('Insira Código Viagem')
    root.frame_dados_onibus = Frame(root, borderwidth=10)
    root.frame_dados_onibus.pack(fill='x')
    
    root.lbl_onibus = Label(root.frame_dados_onibus, text="Código\nLinha: ", font=fonte2)
    root.lbl_onibus.pack(side='left')

    root.txt_veiculo = Entry(root.frame_dados_onibus, textvariable=root.dados_onibus)
    root.txt_veiculo["font"] = fonte
    root.txt_veiculo.delete(0, END)
    root.txt_veiculo.focus_set()
    root.txt_veiculo.pack(side='left', fill='x', expand=True)
   
    fonte_botoes = ('Arial', '90', 'bold')

    #frame 123
    root.frame_1 = Frame(root)
    root.frame_1.configure(bg='white')
    root.frame_1.pack(fill='both', expand=True)

    ###111
    root.butt_1 = Button(root.frame_1, command = lambda:key_1(root))
    root.butt_1['text'] = '1'
    root.butt_1['font'] = fonte_botoes
    # root.butt_1["command"] = key_1(root)
    root.butt_1.configure(bg='white', activebackground='white')
    root.butt_1.pack(side='left', fill='both', expand=True)
    
    ###222
    root.butt_2 = Button(root.frame_1, command = lambda:key_2(root))
    root.butt_2['text'] = '2'
    root.butt_2['font'] = fonte_botoes
    # root.butt_2["command"] = key_2(root)
    root.butt_2.configure(bg='white', activebackground='white')
    root.butt_2.pack(side='left', fill='both', expand=True)
    
    ###333
    root.butt_3 = Button(root.frame_1, command = lambda:key_3(root))
    root.butt_3['text'] = '3'
    root.butt_3['font'] = fonte_botoes
    # root.butt_3["command"] = key_3(root)
    root.butt_3.configure(bg='white',
                                    activebackground='white')
    root.butt_3.pack(side='left', fill='both', expand=True)

    # #frame 
    root.frame_4 = Frame(root)
    root.frame_4.configure(bg='white')
    root.frame_4.pack(fill='both', expand=True)

    ###444
    root.butt_4 = Button(root.frame_4, command = lambda:key_4(root))
    root.butt_4['text'] = '4'
    root.butt_4['font'] = fonte_botoes
    # root.butt_4["command"] = key_4(root)
    root.butt_4.configure(bg='white',
                                    activebackground='white')
    root.butt_4.pack(side='left', fill='both', expand=True)

    ###555
    root.butt_5 = Button(root.frame_4, command = lambda:key_5(root))
    root.butt_5['text'] = '5'
    root.butt_5['font'] = fonte_botoes
    # root.butt_5["command"] = key_5(root)
    root.butt_5.configure(bg='white',
                                    activebackground='white')
    root.butt_5.pack(side='left', fill='both', expand=True)

    ###666
    root.butt_6 = Button(root.frame_4, command = lambda:key_6(root))
    root.butt_6['text'] = '6'
    root.butt_6['font'] = fonte_botoes
    # root.butt_6["command"] = key_6(root)
    root.butt_6.configure(bg='white',
                                    activebackground='white')
    root.butt_6.pack(side='left', fill='both', expand=True)

    #frame 789
    root.frame_7 = Frame(root)
    root.frame_7.configure(bg='white')
    root.frame_7.pack(fill='both', expand=True)
    
    ###777
    root.butt_7 = Button(root.frame_7, command = lambda:key_7(root))
    root.butt_7['text'] = '7'
    root.butt_7['font'] = fonte_botoes
    # root.butt_7["command"] = key_7(root)
    root.butt_7.configure(bg='white',
                                    activebackground='white')
    root.butt_7.pack(side='left', fill='both', expand=True)

    ###888
    root.butt_8 = Button(root.frame_7, command = lambda:key_8(root))
    root.butt_8['text'] = '8'
    root.butt_8['font'] = fonte_botoes
    # root.butt_8["command"] = key_8(root)
    root.butt_8.configure(bg='white',
                                    activebackground='white')
    root.butt_8.pack(side='left', fill='both', expand=True)

    ###999
    root.butt_9 = Button(root.frame_7, command = lambda:key_9(root))
    root.butt_9['text'] = '9'
    root.butt_9['font'] = fonte_botoes
    # root.butt_9["command"] = key_9(root)
    root.butt_9.configure(bg='white',
                                    activebackground='white')
    root.butt_9.pack(side='left', fill='both', expand=True)
    
    #frame espaco
    root.frame_espaco = Frame(root)
    root.frame_espaco.configure(bg='white')
    root.frame_espaco.pack(fill='both', expand=True)
    

    ###_backspace
    root.butt_backspace = Button(root.frame_espaco, command = lambda:def_backspace(root))
    root.butt_backspace['text'] = '←'
    root.butt_backspace['font'] = ('Arial', '51', 'bold')
    root.butt_backspace['width'] = '2'
    # root.butt_backspace["command"] = def_backspace(root)
    root.butt_backspace.configure(bg='white',
                                    activebackground='white')
    root.butt_backspace.pack(side='left', fill='both', expand=True)        


    ###000
    root.butt_0 = Button(root.frame_espaco, command = lambda:key_0(root))
    root.butt_0['text'] = '0'
    root.butt_0['font'] = ('Arial', '100', 'bold')
    root.butt_0["command"] = key_0(root)
    root.butt_0.configure(bg='white',
                                    activebackground='white')
    root.butt_0.pack(side='left', fill='both', expand=True)
    

    # ###cancelar
    # root.butt_cancelar = Button(root.frame_espaco)
    # root.butt_cancelar['text'] = '×'
    # root.butt_cancelar['font'] = fonte_botoes
    # root.butt_cancelar["command"] = root.def_cancelar
    # root.butt_cancelar.configure(bg='white',
    #                              activebackground='white')
    # root.butt_cancelar.pack(side='left', fill='both', expand=True)


    ###aceitar
    root.butt_confirmar = Button(root.frame_espaco,command = lambda: salvar_viagem_offline(root))
    root.butt_confirmar['text'] = '✓'
    root.butt_confirmar['font'] = ('Arial', '68', 'bold')
    # root.butt_confirmar["command"] = salvar_novos_valores(root)
    root.butt_confirmar.configure(bg='white',
                                    activebackground='white')
    root.butt_confirmar.pack(side='left', fill='both', expand=True)

    root.butt_voltar = Button(root)
    root.butt_voltar["text"] = "Voltar"
    root.butt_voltar["bg"] = "white"
    root.butt_voltar["font"] = ("Verdana", "15", "bold")
    root.butt_voltar["height"] = "3"
    root.butt_voltar["command"] = lambda: [root.destroy(), root.quit()]
    root.butt_voltar.pack(fill=X)

    root.mainloop()

### Salvando Viagem
def salvar_linha_id(root):
        global codigo_linha
        codigo_linha = root.txt_veiculo.get()
        root.destroy()
        root.quit()

        if codigo_linha == '0000':
            inicializar_sistema_linha(codigo_linha)
        else:
            print("Código Linha ID: " + codigo_linha)
            logger.warning("Inicio GET Linha ID: " + str(codigo_linha))    
            inicio_sync = datetime.datetime.now()
            r = sincronismo.get_linha_id(codigo_linha) # era get_viagem_id
            fim_sync = datetime.datetime.now()
            tempo_requisicao = fim_sync - inicio_sync 
            logger.warning("Tempo Requisição GET linha ID: " + str(tempo_requisicao)) 

            if not r: 
                viagem_invalida()
            else:
                inicializacao = r.json()
                with open("/home/pi/caixa-magica/core/inicializacao.json", "w") as json_data:
                    json.dump(inicializacao, json_data)
                
                with open("/home/pi/caixa-magica/core/inicializacao.json") as json_data:
                    try:
                        dados_viagem = json.load(json_data)
                        id_viagem = dados_viagem['id']
                        if id_viagem:
                            nome_linha = dados_viagem['programacaoViagem']['horarioViagens'][0]['linha']['nome']
                            num_dia = dados_viagem['programacaoViagem']['horarioViagens'][0]['diaSemana']
                            sentido_volta = dados_viagem['programacaoViagem']['horarioViagens'][0]['sentidoVolta']
                            horario = dados_viagem['programacaoViagem']['horarioViagens'][0]['horario']
                            if sentido_volta:
                                sentido_volta = "Volta"
                            else:
                                sentido_volta = "Ida"

                            dia_semana = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado']
                            dia = dia_semana[num_dia]
                            tela_validacao_linha(nome_linha, dia, sentido_volta, horario, id_viagem, codigo_linha)
                        else:
                            print(str(id_viagem))
                            nome_linha = dados_viagem['nomeLinha']
                            print(nome_linha)
                            dia = 'x'
                            sentido_volta = 'x'
                            horario = 'x'
                            print("@@@@@@@@@@@@@@@@@@@")
                            tela_validacao_linha(nome_linha, dia, sentido_volta, horario, id_viagem, codigo_linha)

                    except:
                        print("Except**************")
                        
                       


                # if sentido_volta:
                #     sentido_volta = "Volta"
                # else:
                #     sentido_volta = "Ida"

                # dia_semana = ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado']
                # dia = dia_semana[num_dia]

                # tela_validacao_linha(nome_linha, dia, sentido_volta, horario, id_viagem, codigo_linha)

def salvar_viagem_offline(root):
    global codigo_linha
    codigo_linha = root.txt_veiculo.get()
    root.destroy()
    root.quit()

    now = datetime.datetime.now(timezone.utc).isoformat()
    tipo = 3
    id_registro_viagem_offline = id_viagem_offline()

    dados = {
        "dataInicial": now,
        "tipo": tipo,
        "status": 1,
        "totalPassageiros": 0,
        "veiculoId": onibus_id,
        "viagemId": 0,
        "linhaId": 0,
        "tarifaId": 0,
        "responsavelId": id_web_motorista,
        "horarioViagemId": 0000,
        "id": id_registro_viagem_offline,
        "dataCriacao": now,
        "ativo": 'true',
        "codigoLinha": codigo_linha
        }
    with open('/home/pi/caixa-magica/core/viagem.json', 'w+') as json_data:
        json.dump(dados, json_data)

    tela_validacao_offline(tipo, codigo_linha, id_registro_viagem_offline)

### Alertas
def tela_confirmacao(nome_motorista):
   root2 = Tk()
   style = ttk.Style(root2)
   root2.update()
   root2.deiconify()
   root2.configure(background = "white")
   root2.attributes("-fullscreen",True)

    # root2.container0 = ttk.Frame(root2)
    # root2.container0['height'] = '600'
    # root2.container0.pack(side = 'top')
   

   root2.verif2 = Message(root2, text = nome_motorista + ", não existem viagens programadas nesse ônibus para você. Deseja programar uma nova viagem para este veículo?",fg='black',bg='white',font=('Verdana','25','bold'))
   root2.verif2['width'] = '420'
   root2.verif2['justify'] = CENTER
   root2.verif2.pack(side = 'top')
   
   
   root2.butt_yes = Button(root2, command = lambda:[root2.destroy(), root2.quit(), tela_input_linha()])
   root2.butt_yes['text'] = 'SIM'
   root2.butt_yes['font'] = ('Verdana','25','bold')
   root2.butt_yes['height'] = '5'
   root2.butt_yes['width'] = '6'

   root2.butt_yes.configure(bg='pale green', activebackground='white')
   root2.butt_yes.pack(side='left', padx = 40)

   root2.butt_no = Button(root2,command = lambda:[root2.destroy(), root2.quit()])
   root2.butt_no['text'] = 'NÃO'
   root2.butt_no['font'] = ('Verdana','25','bold')
   root2.butt_no['height'] = '5'
   root2.butt_no['width'] = '6'

   root2.butt_no.configure(bg='tomato3', activebackground='white')
   root2.butt_no.pack(side='right',padx = (0,40))

   root2.mainloop()
   return

def viagem_invalida():
    root3 = Tk()
    root3.deiconify()
    root3.configure(background = "orange red")
    root3.attributes("-fullscreen", True)

    root3.aviso = Message(root3)
    root3.aviso["text"] = 'LINHA INVÁLIDA!!! \n\n\n Por favor, insira outro código\n\n\n'
    # root3.aviso["text"] = '\n\n\nLINHA INVÁLIDA!!! \n\n\n\n\n\n'
    root3.aviso["bg"] = "orange red"
    root3.aviso["font"] = ("Verdana", "26", "bold")
    root3.aviso["width"] = "420"
    root3.aviso["justify"] = CENTER
    root3.aviso.pack()
    
    root3.button = Button(root3,command = lambda:[root3.destroy(), root3.quit(),tela_input_linha()])
    # root3.button = Button(root3,command = lambda:[root3.destroy(), root3.quit()])
    root3.button['text'] = 'OK'
    root3.button['font'] = ('Verdana','30','bold')
    root3.button['height'] = '3'
    root3.button['width'] = '6'
    root3.button.pack()

    root3.mainloop()
    return False

def alert_no_network():
   global root1
   root1 = Tk()
   style = ttk.Style(root1)
   root1.update()
   root1.deiconify()
   root1.configure(background = "red")
   root1.attributes("-fullscreen",True)

   verif2 = Label(root1, text = "\n\n\n\n\n\n\n\nSem Conexão\ncom Internet",fg='black',bg='red',font=('Verdana','25','bold'))
   verif2.pack(side = 'top',fill = X)

   root1.after(3000, lambda: [root1.quit(), root1.destroy()])

   root1.mainloop()
   return

def alerta():
   root1 = Tk()
   style = ttk.Style(root1)
   root1.update()
   root1.deiconify()
   root1.configure(background = "white")
   root1.attributes("-fullscreen",True)

   verif2 = Message(root1, text = "\n\n\n\n\n\nVocê solicitou cadastrar uma nova viagem por código de linha.\nVocê será direcionado para a tela no qual será solicitado o código da linha que deseja realizar",fg='black',bg='white',font=('Verdana','20','bold'))
   verif2['width'] = '420'
   verif2['justify'] = CENTER
   verif2.pack(side = 'top',fill = X)

   root1.after(6000, lambda: [root1.destroy(), root1.quit(), tela_input_linha()])

   root1.mainloop()
   return

### Telas Validação
def tela_validacao_linha(nome_linha, dia, sentido, horario, id, codigo_linha):
    root3 = Tk()
    root3.update()
    root3.deiconify()
    root3.configure(background = "white")
    root3.attributes("-fullscreen", True)

    root3.aviso = Message(root3)
    root3.aviso["text"] = nome_motorista + ", você confirma os dados para a abertura da LINHA de CÓDIGO " + str(codigo_linha) + "?"
    root3.aviso["bg"] = "white"
    root3.aviso["font"] = ("Verdana", "25", "bold")
    root3.aviso["width"] = "420"
    root3.aviso["justify"] = CENTER
    root3.aviso.pack(pady=(20, 50))

    root3.nome_linha = Label(root3)
    root3.nome_linha["text"] = "Linha:\n" + nome_linha
    root3.nome_linha["bg"] = "white"
    root3.nome_linha["width"] = '420'
    root3.nome_linha['wraplength'] = '420'
    root3.nome_linha["justify"] = CENTER
    root3.nome_linha["font"] = ('Verdana','25','bold')
    root3.nome_linha.pack()

    root3.dia = Label(root3)
    root3.dia["text"] = "Dia: " + str(dia)
    root3.dia["bg"] = "white"
    root3.dia["font"] = ('Verdana','25','bold')
    root3.dia.pack()

    root3.sentido = Label(root3)
    root3.sentido["text"] = "Sentido: " + str(sentido)
    root3.sentido["bg"] = "white"
    root3.sentido["font"] = ('Verdana','25','bold')
    root3.sentido.pack()

    root3.horario = Label(root3)
    root3.horario["text"] = "Horário: " + str(horario)
    root3.horario["bg"] = "white"
    root3.horario["font"] = ('Verdana','25','bold')
    root3.horario.pack()

    root3.butt_yes = Button(root3)
    root3.butt_yes["height"] = "5"
    root3.butt_yes["width"] = "6"
    root3.butt_yes["text"] = "SIM"
    root3.butt_yes["bg"] = "pale green"
    root3.butt_yes["activebackground"] = "white"
    root3.butt_yes["font"] = ('Verdana','25','bold')
    root3.butt_yes["command"] = lambda: [root3.destroy(),  inicializar_sistema_linha(codigo_linha)] # Ir pra tela de inicialização normal
    root3.butt_yes.pack(padx=(50, 10), side = LEFT)

    root3.butt_no = Button(root3)
    root3.butt_no["height"] = "5"
    root3.butt_no["width"] = "6"
    root3.butt_no["text"] = "NÃO"
    root3.butt_no["bg"] = "tomato3"
    root3.butt_no["activebackground"] = "white"
    root3.butt_no["font"] = ('Verdana','25','bold')
    root3.butt_no["command"] = lambda: [root3.destroy(), root3.quit(), tela_input_linha()]
    root3.butt_no.pack(padx=(10, 50), side = RIGHT)
    print("&&&&&&&&&&&&&&&&&&&&&&&&&&&&")
    root3.mainloop()
    return

def tela_validacao_offline(tipo, codigo_linha, id_registro_viagem_offline):
    root4 = Tk()
    root4.update()
    root4.deiconify()
    root4.configure(background = "white")
    root4.attributes("-fullscreen", True)

    root4.aviso = Message(root4)
    root4.aviso["text"] = nome_motorista + ", você confirma os dados para a abertura de viagem de ID " + str(codigo_linha) + "?"
    root4.aviso["bg"] = "white"
    root4.aviso["font"] = ("Verdana", "25", "bold")
    root4.aviso["width"] = "420"
    root4.aviso["justify"] = CENTER
    root4.aviso.pack(pady=(20, 50))

    root4.butt_yes = Button(root4)
    root4.butt_yes["height"] = "5"
    root4.butt_yes["width"] = "6"
    root4.butt_yes["text"] = "SIM"
    root4.butt_yes["bg"] = "pale green"
    root4.butt_yes["activebackground"] = "white"
    root4.butt_yes["font"] = ('Verdana','25','bold')
    root4.butt_yes["command"] = lambda: [root4.destroy(), inicializar_sistema_offline(tipo, codigo_linha, id_registro_viagem_offline)] # Ir pra tela de inicialização normal
    root4.butt_yes.pack(padx=(50, 10), side = LEFT)

    root4.butt_no = Button(root4)
    root4.butt_no["height"] = "5"
    root4.butt_no["width"] = "6"
    root4.butt_no["text"] = "NÃO"
    root4.butt_no["bg"] = "tomato3"
    root4.butt_no["activebackground"] = "white"
    root4.butt_no["font"] = ('Verdana','25','bold')
    root4.butt_no["command"] = lambda: [root4.destroy(), root4.quit(), tela_input_offline()]
    root4.butt_no.pack(padx=(10, 50), side = RIGHT)

    root4.mainloop()
    return

### Inicialização Sistema
def inicializar_sistema_linha(codigo_linha):
    '''
    tipo 0 -> normal
    tipo 1 -> linha
    tipo 2 -> especial (caixa tem)
    tipo 3 -> offline
    '''
    tipo = 1
    status = 3
    inicio_sync = datetime.datetime.now()
    r = sincronismo.iniciar_viagem(tipo, id_web_motorista, status, codigo_linha)
    fim_sync = datetime.datetime.now()
    tempo_requisicao = fim_sync - inicio_sync
    logger.warning("Tempo Requisição INICIAR VIAGEM: " + str(tempo_requisicao))
    ### tirar essa parte e colocar em 'iniciar_viagem'
    if not r:
        return False
    else:
        response = r.json()
        with open("/home/pi/caixa-magica/core/viagem.json", "w+") as viagem:
            viagem.write(json.dumps(response))

        os.system("sh inicializar_sistema.sh")

def inicializar_sistema_offline(tipo, codigo_linha, id_registro_viagem_offline):
    try:
        with open("/home/pi/caixa-magica/sincronismo/abertura_offline.json", "r") as json_data:
            json.load(json_data)
    except:
        with open("/home/pi/caixa-magica/sincronismo/abertura_offline.json", "w") as json_data:
            json.dump(list(), json_data)
    
    now = datetime.datetime.now(timezone.utc).isoformat()
    status = 3

    dados = {
        'dataInicial': now,
        'tipo': tipo,
        'responsavelId': int(id_web_motorista),
        'codigoLinha': codigo_linha,
        'idRegistroViagemOffline': id_registro_viagem_offline,
        "status": status
    }

    with open('/home/pi/caixa-magica/sincronismo/abertura_offline.json', 'r') as json_data:
        abertura_offline = json.load(json_data)

    abertura_offline.append(dados)

    with open("/home/pi/caixa-magica/sincronismo/abertura_offline.json", "w") as json_data:
        json.dump(abertura_offline, json_data)

    os.system('sh inicializar_sistema.sh')

### Função Manutenção
def fiscal_manutencao():
  #  while true:   
    root = Tk()
    root.update()
    root.deiconify()
    root.configure(background = "white")
    root.attributes("-fullscreen", True)

    root.label = Label(root)
    root.label["text"] = "MANUTENÇÃO"
    root.label["bg"] = "white"
    root.label["font"] = ("Arial", "25", "bold")
    # root.label["width"] = "420"
    root.label["justify"] = CENTER
    root.label.pack(pady=(30, 12))

    root.zerar = Button(root)
    root.zerar["text"] = "Zerar"
    root.zerar["width"] = "14"
    root.zerar["height"] = "2"
    root.zerar["font"] = ('Arial', '18')
    root.zerar["command"] = lambda: [zerar()]
    root.zerar.pack(pady=12)

    root.atualizar = Button(root)
    root.atualizar["text"] = "Atualizar"
    root.atualizar["width"] = "14"
    root.atualizar["height"] = "2"
    root.atualizar["font"] = ('Arial', '18')
    root.atualizar.pack(pady=12)

    root.teste = Button(root)
    root.teste["text"] = "Teste"
    root.teste["width"] = "14"
    root.teste["height"] = "2"
    root.teste["font"] = ('Arial', '18')
    root.teste["command"] = lambda: [sw_teste()]
    root.teste.pack(pady=12)

    root.botaoping = Button(root)
    root.botaoping["text"] = "Ping"
    root.botaoping["height"] = "2"
    root.botaoping["width"] ="14"
    root.botaoping["font"] = ('Arial', '18')
    root.botaoping["command"] = lambda: [efetua_ping()]
    root.botaoping.pack(pady=12)

    root.labelserial = Label(root)
    root.labelserial["text"] = "Serial: " +  getSerial()
    root.labelserial["bg"] = "white"
    #root.labelSerial["fg"] = "#ff0000"
    root.labelserial["font"] = ("Arial", 18, "bold")
    root.labelserial["justify"] = CENTER
    root.labelserial.pack(pady=12)   

    root.labelpendentes = Label(root)
    root.labelpendentes["text"] ="Pendentes integr: " + str(getNotIntegrated())
    root.labelpendentes["font"] = ("Arial", 18, "bold")
    root.labelpendentes["justify"] = CENTER
    root.labelpendentes.pack(pady=12)

    #root.horario = tkinter.StringVar()
    #root.horario.set(time.time())
    #root.labelHorario = Label(root, textvariable=root.horario)
    #root.labelHorario["text"] = ""   
    #root.labelHorario.pack(pady=12)

    root.voltar = Button(root)
    root.voltar["text"] = "Sair"
    root.voltar["width"] = "14"
    root.voltar["height"] = "2"
    root.voltar["font"] = ('Arial', '18')
    root.voltar["command"] = lambda: [root.destroy(), root.quit()]
    root.voltar.pack(pady=(175, 12)) #325

    root.ctr = 0
    root.mainloop()

def efetua_ping():
    #output = os.system('ping -c 1 www.google.com')
    output = sp.getoutput('ping -c 1 www.google.com')
    tkinter.messagebox.showinfo("Ping", output)

def sw_teste():
    os.system('sudo pyconcrete /home/pi/caixa-magica/teste_HW/view.pye')

def reiniciar():
    os.system('sudo sh /home/pi/caixa-magica/reboot.sh')

def zerar():
    os.system('sudo sh /home/pi/caixa-magica/botar_em_prod.sh')

### Funções Diversas
def operacao_on():
   with open('/home/pi/caixa-magica/sincronismo/sincronismo.json', 'r') as json_data:
      dados_sincronismo = json.load(json_data)
   url = dados_sincronismo['url']
   try:
      r = requests.get(url)
      return True
   except:
      return False

def id_viagem_offline():
    now = datetime.datetime.now()
    day = now.day
    month = now.month
    year = now.year
    hour = now.hour
    minute = now.minute
    second = now.second
    datas = [day, month, year, hour, minute, second]
    datas_treated = []
    for i, v in enumerate(datas):
        if 0 <= v < 10:
            v = '0' + str(v)
            datas[i] = v
        else:
            v = str(v)
            datas[i] = v
    id_unique = ''.join(datas)
    return int(id_unique)

def key_1(root):
    insert_text(root,'1')  
    
def key_2(root):
    insert_text(root,'2')
    
def key_3(root):
    insert_text(root,'3')

def key_4(root):
    insert_text(root,'4')

def key_5(root):
    insert_text(root,'5')

def key_6(root):
    insert_text(root,'6')

def key_7(root):
    insert_text(root,'7')

def key_8(root):
    insert_text(root,'8')

def key_9(root):
    insert_text(root,'9')

def key_0(root):
    insert_text(root,'0')

#cancelar
# def def_cancelar(root):
#     root.destroy()

#espaco
def def_espaco(root):
    root.insert_text(root,' ')

#apagar
def def_backspace(root):
    if root.focus_get()==root.txt_veiculo:
        pos_fin = len(root.txt_veiculo.get()) -1
        root.txt_veiculo.delete(int(pos_fin))
    
    # if root.focus_get()==root.txt_instalacao:
    #     pos_fin = len(root.txt_instalacao.get()) -1
    #     root.txt_instalacao.delete(int(pos_fin))            

def insert_text(root, value):
    if root.focus_get()==root.txt_veiculo:
        root.txt_veiculo.insert(END, value.upper())

while True:
    try:
        with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as s:
            s.bind((HOST,PORT))
            s.listen(1)
            conn ,addr = s.accept()
            with conn:
                while True:
                    try:
                        pkg = conn.recv(512)
                        if pkg:
                            data = json.loads(pkg.decode('utf-8'))
                            if data['tela'] == 1:
                                global nome_motorista
                                global id_qrcode_motorista
                                global id_web_motorista
                                nome_motorista = data["nome_motorista"]
                                id_qrcode_motorista = data["id_qrcode_motorista"]
                                id_web_motorista = data["id_web_motorista"]
                                core_init(nome_motorista, id_qrcode_motorista, id_web_motorista)
                            elif data['tela'] == 2:
                                fiscal_manutencao()                                
                        else:
                            break 
                        conn.sendall(pkg)
                    except Exception as e:
                        logging.exception("Erro rcv - " + str(e))
                        print("erro recv"+ str(e))
    except Exception as e:
        print("Erro na tela - ", e)
